df.dtypes
df.isnull().sum()
df.drop('Useless_colname', inplace = True, axis = 1)
x = df.drop('notx_colname', axis=1)
y = df['Purchased']

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test =  train_test_split(x, y, test_size = 0.25, random_state = 0)

from sklearn.preprocessing import StandardScaler
std = StandardScaler()
x_train = std.fit_transform(x_train)
x_test = std.transform(x_test)

from sklearn.linear_model import LogisticRegression
lrmodel = LogisticRegression()
lrmodel.fit(x_train, y_train)

from sklearn.metrics import accuracy_score, precision_score, recall_score
y_pred = lrmodel.predict(x_test)
score1 = accuracy_score(y_test, y_pred)

print('Accuracy : {:0.2f}'. format(score1))

x_new = [[16785426, 25]]
x_new = std.fit_transform(x_new)
y_new = lrmodel.predict(x_new)
y_new

from sklearn.metrics import confusion_matrix
from sklearn.metrics import auc, roc_curve
cm = confusion_matrix(y_test, y_pred)
cm

from sklearn.metrics._plot.confusion_matrix import ConfusionMatrixDisplay
cm_display=ConfusionMatrixDisplay(cm).plot()

from sklearn.metrics import classification_report
print(classification_report(y_test,y_pred))

tn, fp, fn, tp = confusion_matrix(y_test, y_pred).ravel()
tn, fp, fn, tp

#for GaussianNB use this instead of Logistic Regression
from sklearn.naive_bayes import GaussianNB
nb_model=GaussianNB()
nb_model.fit(x_train,y_train)

#linear Regression
from sklearn.linear_model import LinearRegression
Lireg = LinearRegression()
Lireg.fit(x_train, y_train)

# mean_squared_error
from sklearn.metrics import mean_squared_error
error = mean_squared_error(y_test, y_pred)
print('Mean Squared Error:', error)
